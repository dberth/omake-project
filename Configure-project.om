# Copyright (C) Denis Berthod 2015
# This file is distributed under the MIT licence

USE_OCAMLFIND = true

public.Features[] =

private.filter(func, xs) =
	acc[] =
	xs.foreach(x) =>
		if $(func $(x))
			acc += $(x)
			export
		export
	return $(acc)


private.bold(s) =
	value $"$(tgetstr bold)$(s)$(tgetstr sgr0)"

private.Flag(name, suffix) =
	try
		value $(getvar $(name)$(suffix))
	catch Exception(e)
		value false

private.Required(name) =
	value $(Flag $(name), $"_required")

private.Disabled(name) =
	value $(Flag $(name), $"_disabled")


Pkg(pkg)=
	.STATIC: :key: $(pkg)
		private.COMMAND = $(OCAMLFIND) query $(pkg)
		ENABLED = $(and $(not $(Disabled $(pkg))), $(shell-success-null $(COMMAND)))
		export PKGPATH
		if $(ENABLED)
			PKGPATH = $(shell $(OCAMLFIND) query $(pkg))
		else
			PKGPATH =
		export ENABLED PKGPATH

	OBJ. =
		PKGNAME = $(pkg)
		ENABLED = $(ENABLED)
		PKGPATH = $(PKGPATH)
		export

	return $(OBJ)

private.print_fixed_size(s, size) =
	l = $(s.length)
	diff = $(sub $(size), $(l))
	print($(s))
	while $(le 0, $(diff))
		diff = $(sub $(diff), 1)
		print($".")

private.print_result(prefix, suffix) =
	print_fixed_size($(prefix), 50)
	println($(suffix))

private.PkgRequiredStatus(pkg)=
	if $(Required $(pkg))
		value $" (REQUIRED)"
	elseif $(Disabled $(pkg))
		value $" (DISABLED)"
	else
		value $" "

ConfigFailure = false

PkgResultStatus(pkg) =
	export
	if $(Required $(pkg.PKGNAME))
		if $(pkg.ENABLED)
			value $"FOUND"
		else
			ConfigFailure = true
			value $"FAILURE"
			export ConfigFailure
		export ConfigFailure
	else
		if $(pkg.ENABLED)
			value $"FOUND"
		else
			value $"NOT FOUND"

private.PrintPkg(pkg)=
	Pack = $(Pkg $(pkg))
	RESULT_STATUS = $(PkgResultStatus $(Pack))
	print_result($"    Package $(bold $(pkg))$(PkgRequiredStatus $(pkg))", $" $(bold [$(RESULT_STATUS)])")
	if $(Pack.PKGPATH)
		println($"    $(Pack.PKGPATH)")
	println($" ")
	export

private.Feature_(name, pkgs, required, disabled) =
	OBJ. =
		NAME = $(name)
		ENABLED = $(and $(not $(disabled)), $(pkgs.forall $(fun pkg => $(pkg.ENABLED))))
		REQUIRED = $(required)
		MISSING_PKGS =
			PKGS = $(filter $(fun pkg => $(not $(pkg.ENABLED))), $(pkgs))
			PKGS.foreach(pkg) =>
				value $(pkg.PKGNAME)
		PKG_NAMES =
			pkgs.foreach(pkg) =>
				value $(pkg.PKGNAME)
	return $(OBJ)

Feature(name, pkg_names, required) =
	pkg_names = $(split $" ", $(pkg_names))
	pkgs =
		pkg_names.foreach(pkg_name) =>
			value $(Pkg $(pkg_name))
	Feature = $(Feature_ $(name), $(pkgs), $(required), $(Disabled name))
	Features +=
		value $(Feature)
	export Features
	value $(Feature)

private.RequiredFeature(feature) =
	EXTERNAL_REQUIRED = $(Required $(feature.NAME))
	value $(or $(feature.REQUIRED), $(EXTERNAL_REQUIRED))


private.RequiredStatus(feature) =
	if $(RequiredFeature $(feature))
		value $"(REQUIRED)"
	elseif $(Disabled $(feature.NAME))
		value $"(DISABLED)"
	else
		value $"(OPTIONAL)"

ResultStatus(feature) =
	export
	if $(RequiredFeature $(feature))
		if $(feature.ENABLED)
			value $"OK"
		else
			ConfigFailure = true
			value $"FAILURE"
			export ConfigFailure
		export ConfigFailure
	else
		if $(feature.ENABLED)
			value $"ENABLED"
		else
			value $"DISABLED"

private.PrintFeature(feature) =
	RESULT_STATUS = $(ResultStatus $(feature))
	print_result($"    Feature $(bold $(feature.NAME)) $(RequiredStatus $(feature))", $" $(bold [$(RESULT_STATUS)])")
	if $(not $(feature.ENABLED))
		println($"    Missing packages: $(feature.MISSING_PKGS)")
	println($" ")
	export

private.PrintReportTitle(title) =
	println($" ")
	println($"    $(bold [ $(title) Report ])")
	println($" ")


PackagesReport()=
	PrintReportTitle($"Package")
	pkgs[] =
	Features.foreach(feature) =>
		pkgs += $(feature.PKG_NAMES)
		export
	pkgs = $(set $(pkgs))
	pkgs.foreach(pkg_name) =>
		PrintPkg($(pkg_name))
		export
	if $(ConfigFailure)
		exit(1)

FeaturesReport() =
	DefineCommandVars()
	PrintReportTitle($"Feature")
	Features.foreach(feature) =>
		PrintFeature($(feature))
		export
	if $(ConfigFailure)
		exit(1)

EnvVarReport(var_name) =
	VAR =
		try
			value $(getvar $(var_name))
		catch Exception(e)
			value ""
	println($"    $(var_name)=$(VAR)")
	value $(VAR)

EnvVarsReport()=
	DefineCommandVars()
	PrintReportTitle($"Env. Variable")
	ENV. =
		PREFIX = $(EnvVarReport $"prefix")
	value $(ENV)
